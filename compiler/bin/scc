#!/usr/bin/env bash

################################################################################
# Check & setup args
################################################################################

if [[ $# -ne 1 && $# -ne 2  ]]; then
	echo "Superconductor visualization compiler"
    echo "Usage: $0 <input ftl file> [<output visualization filename>]"
 	echo "<output visualization filename> is the (optional) name to write the compiled visualization to."
 	echo "\tIf not supplied, the visualization will have the same name and path as the input file, but with a .visualization extension"
    echo
    echo "Will put intermediate build products in ./tmp (can be removed with \`make clean\`.)"
    exit 1
fi

GRAMMAR=$1
if [ ! -r $GRAMMAR ]; then
	echo "Error: could not read from input file $GRAMMAR" >&2
	exit 1
fi

# If not supplied, imply the output filename from the input filename
if [ $# -eq 2 ]; then
	KERNEL=$2
else
	KERNEL=${GRAMMAR%.*}'.visualization'
	if [ -e $KERNEL ]; then
		echo "Error: no output filename supplied. Assumed $KERNEL, but a file by that name already exists. To overwrite the existing file, supply the output filename explicitly." >&2
		exit 1
	fi
fi

# If the paths aren't absolute (don't start with a '/',) prepend pwd to them
if [[ $GRAMMAR !=   '/'* ]]; then GRAMMAR=`pwd`/$GRAMMAR; fi
if [[ $KERNEL != '/'* ]]; then KERNEL=`pwd`/$KERNEL; fi


################################################################################
# Check & setup args
################################################################################

BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../.."
JSDIR="$BASEDIR/superconductorjs"
COMPILERDIR="$BASEDIR/compiler"
TMPDIR="$JSDIR/tmp"

EXPANDED="$TMPDIR/expanded-grammar.ftl"


cd "$JSDIR"
make clean > /dev/null
mkdir -p "$TMPDIR" > /dev/null


echo -e "\e[33m########################################"
echo "#       Running macro processor        #"
echo -e "########################################\e[0m"
./tools/macro-processor.js "$GRAMMAR" "$EXPANDED"
echo
echo


cd "$COMPILERDIR"
echo -e "\e[33m########################################"
echo "#        Running FTL compiler          #"
echo -e "########################################\e[0m"
exec 3>&1 4>&2
FTLOUTPUT=$({ ./runFtlWebCLfast \"$EXPANDED\" \"$TMPDIR\" 2>&4 | grep -v -F 'BUILD SUCCESSFUL' 1>&3;} 4>&1) # 3>/dev/null (redirects stdout of ant to /dev/null)
exec 3>&- 4>&-

if [ -n "$FTLOUTPUT" ]; then echo -e "\n\e[1;31mError compiling FTL file\e[0m" $FTLOUTPUT >&2; exit 1; fi
# echo "Running ./runFtlWebCLfast $EXPANDED $TMPDIR"
# ./runFtlWebCLfast $EXPANDED $TMPDIR

echo
echo


echo -e "\e[33m########################################"
echo "#  Building JavaScript and WebCL visualization   #"
echo -e "########################################\e[0m"

cd "$JSDIR"

GEN_PATH=$TMPDIR EXTRA_BACKENDS=$EXTRA_BACKENDS make all2
if [ "$?" -ne 0 ]; then echo -e "\n\e[1;31mError compiling JavaScript visualization file (phase 1)\e[0m" >&2; exit 1; fi

echo
echo


echo -e "\e[33m########################################"
echo    "#      Saving visualization files      #"
echo -e "########################################\e[0m"

echo "Saving $KERNEL"
cp $TMPDIR/kernels.visualization $KERNEL

###copy for use by flattener
echo "Saving `dirname $KERNEL`/kbindings.js"
cp $TMPDIR/kbindings.js `dirname $KERNEL`/kbindings.js
echo
echo


echo -e "\e[1;32mCompiled Successfully\e[0m"
